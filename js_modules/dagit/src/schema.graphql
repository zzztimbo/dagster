type ArrayConfigType implements ConfigType & WrappingConfigType {
  key: String!
  description: String
  recursiveConfigTypes: [ConfigType!]!
  typeParamKeys: [String!]!
  isSelector: Boolean!
  ofType: ConfigType!
}

type CancelPipelineExecutionFailure {
  run: PipelineRun!
  message: String!
}

union CancelPipelineExecutionResult = CancelPipelineExecutionSuccess | CancelPipelineExecutionFailure | PipelineRunNotFoundError | PythonError

type CancelPipelineExecutionSuccess {
  run: PipelineRun!
}

type CompositeConfigType implements ConfigType {
  key: String!
  description: String
  recursiveConfigTypes: [ConfigType!]!
  typeParamKeys: [String!]!
  isSelector: Boolean!
  fields: [ConfigTypeField!]!
}

type CompositeSolidDefinition implements ISolidDefinition & SolidContainer {
  name: String!
  description: String
  metadata: [MetadataItemDefinition!]!
  inputDefinitions: [InputDefinition!]!
  outputDefinitions: [OutputDefinition!]!
  requiredResources: [ResourceRequirement!]!
  solids: [Solid!]!
  inputMappings: [InputMapping!]!
  outputMappings: [OutputMapping!]!
}

enum ComputeIOType {
  STDOUT
  STDERR
}

type ComputeLogFile {
  path: String!
  data: String
  cursor: Int!
  size: Int!
  downloadUrl: String
}

type ComputeLogs {
  runId: String!
  stepKey: String!
  stdout: ComputeLogFile
  stderr: ComputeLogFile
}

interface ConfigType {
  key: String!
  description: String
  recursiveConfigTypes: [ConfigType!]!
  typeParamKeys: [String!]!
  isSelector: Boolean!
}

type ConfigTypeField {
  name: String!
  description: String
  configType: ConfigType!
  configTypeKey: String!
  defaultValue: String
  isOptional: Boolean!
}

type ConfigTypeNotFoundError implements Error {
  message: String!
  pipeline: Pipeline!
  configTypeName: String!
}

scalar Cursor

union DeletePipelineRunResult = DeletePipelineRunSuccess | PythonError | PipelineRunNotFoundError

type DeletePipelineRunSuccess {
  runId: String!
}

interface DisplayableEvent {
  label: String!
  description: String
  metadataEntries: [EventMetadataEntry!]!
}

type EngineEvent implements MessageEvent & DisplayableEvent & StepEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  step: ExecutionStep
  label: String!
  description: String
  metadataEntries: [EventMetadataEntry!]!
  error: PythonError
  markerStart: String
  markerEnd: String
}

type EnumConfigType implements ConfigType {
  key: String!
  description: String
  recursiveConfigTypes: [ConfigType!]!
  typeParamKeys: [String!]!
  isSelector: Boolean!
  values: [EnumConfigValue!]!
  givenName: String!
}

type EnumConfigValue {
  value: String!
  description: String
}

scalar EnvironmentConfigData

type EnvironmentSchema {
  rootEnvironmentType: ConfigType!
  allConfigTypes: [ConfigType!]!
  isEnvironmentConfigValid(environmentConfigData: EnvironmentConfigData): PipelineConfigValidationResult!
}

union EnvironmentSchemaOrError = EnvironmentSchema | PipelineNotFoundError | InvalidSubsetError | ModeNotFoundError | PythonError

interface Error {
  message: String!
}

enum EvaluationErrorReason {
  RUNTIME_TYPE_MISMATCH
  MISSING_REQUIRED_FIELD
  MISSING_REQUIRED_FIELDS
  FIELD_NOT_DEFINED
  FIELDS_NOT_DEFINED
  SELECTOR_FIELD_ERROR
}

type EvaluationStack {
  entries: [EvaluationStackEntry!]!
}

union EvaluationStackEntry = EvaluationStackListItemEntry | EvaluationStackPathEntry

type EvaluationStackListItemEntry {
  listIndex: Int!
}

type EvaluationStackPathEntry {
  fieldName: String!
}

type EventJsonMetadataEntry implements EventMetadataEntry {
  label: String!
  description: String
  jsonString: String!
}

type EventMarkdownMetadataEntry implements EventMetadataEntry {
  label: String!
  description: String
  mdStr: String!
}

interface EventMetadataEntry {
  label: String!
  description: String
}

type EventPathMetadataEntry implements EventMetadataEntry {
  label: String!
  description: String
  path: String!
}

type EventPythonArtifactMetadataEntry implements EventMetadataEntry {
  label: String!
  description: String
  module: String!
  name: String!
}

type EventTextMetadataEntry implements EventMetadataEntry {
  label: String!
  description: String
  text: String!
}

type EventUrlMetadataEntry implements EventMetadataEntry {
  label: String!
  description: String
  url: String!
}

union ExecutePlanResult = ExecutePlanSuccess | PipelineConfigValidationInvalid | PipelineNotFoundError | InvalidStepError | PythonError

type ExecutePlanSuccess {
  pipeline: Pipeline!
  hasFailures: Boolean!
  stepEvents: [StepEvent!]!
  rawEventRecords: [String!]!
}

input ExecutionMetadata {
  runId: String
  tags: [ExecutionTag!]
}

input ExecutionParams {
  selector: ExecutionSelector!
  environmentConfigData: EnvironmentConfigData
  mode: String
  executionMetadata: ExecutionMetadata
  stepKeys: [String!]
  preset: String
  retryRunId: String
}

type ExecutionPlan {
  steps: [ExecutionStep!]!
  pipeline: PipelineReference!
  artifactsPersisted: Boolean!
}

union ExecutionPlanResult = ExecutionPlan | PipelineConfigValidationInvalid | PipelineNotFoundError | InvalidSubsetError | PythonError

type ExecutionSelection {
  name: String!
  solidSubset: [String!]
}

input ExecutionSelector {
  name: String!
  solidSubset: [String!]
}

type ExecutionStep {
  key: String!
  inputs: [ExecutionStepInput!]!
  outputs: [ExecutionStepOutput!]!
  solidHandleID: String!
  kind: StepKind!
  metadata: [MetadataItemDefinition!]!
}

type ExecutionStepFailureEvent implements MessageEvent & StepEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  step: ExecutionStep
  error: PythonError!
  failureMetadata: FailureMetadata
}

type ExecutionStepInput {
  name: String!
  type: RuntimeType!
  dependsOn: [ExecutionStep!]!
}

type ExecutionStepInputEvent implements MessageEvent & StepEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  step: ExecutionStep
  inputName: String!
  typeCheck: TypeCheck!
}

type ExecutionStepOutput {
  name: String!
  type: RuntimeType!
}

type ExecutionStepOutputEvent implements MessageEvent & StepEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  step: ExecutionStep
  outputName: String!
  typeCheck: TypeCheck!
}

type ExecutionStepRestartEvent implements MessageEvent & StepEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  step: ExecutionStep
}

type ExecutionStepSkippedEvent implements MessageEvent & StepEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  step: ExecutionStep
}

type ExecutionStepStartEvent implements MessageEvent & StepEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  step: ExecutionStep
}

type ExecutionStepSuccessEvent implements MessageEvent & StepEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  step: ExecutionStep
}

type ExecutionStepUpForRetryEvent implements MessageEvent & StepEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  step: ExecutionStep
  error: PythonError!
  secondsToWait: Int
}

input ExecutionTag {
  key: String!
  value: String!
}

type ExpectationResult implements DisplayableEvent {
  label: String!
  description: String
  metadataEntries: [EventMetadataEntry!]!
  success: Boolean!
}

type FailureMetadata implements DisplayableEvent {
  label: String!
  description: String
  metadataEntries: [EventMetadataEntry!]!
}

type FieldNotDefinedConfigError implements PipelineConfigValidationError {
  message: String!
  path: [String!]!
  stack: EvaluationStack!
  reason: EvaluationErrorReason!
  fieldName: String!
}

type FieldsNotDefinedConfigError implements PipelineConfigValidationError {
  message: String!
  path: [String!]!
  stack: EvaluationStack!
  reason: EvaluationErrorReason!
  fieldNames: [String!]!
}

type Input {
  solid: Solid!
  definition: InputDefinition!
  dependsOn: [Output!]!
}

type InputDefinition {
  solidDefinition: SolidDefinition!
  name: String!
  description: String
  type: RuntimeType!
}

type InputMapping {
  mappedInput: Input!
  definition: InputDefinition!
}

type Instance {
  info: String!
  runLauncher: RunLauncher
  disableRunStart: Boolean!
}

type InvalidOutputError {
  stepKey: String!
  invalidOutputName: String!
}

type InvalidPipelineRunsFilterError implements Error {
  message: String!
}

type InvalidStepError {
  invalidStepKey: String!
}

type InvalidSubsetError implements Error {
  message: String!
  pipeline: Pipeline!
}

interface ISolidDefinition {
  name: String!
  description: String
  metadata: [MetadataItemDefinition!]!
  inputDefinitions: [InputDefinition!]!
  outputDefinitions: [OutputDefinition!]!
  requiredResources: [ResourceRequirement!]!
}

union LaunchPipelineExecutionResult = LaunchPipelineExecutionSuccess | RunLauncherNotDefinedError | InvalidStepError | InvalidOutputError | PipelineConfigValidationInvalid | PipelineNotFoundError | PythonError

type LaunchPipelineExecutionSuccess {
  run: PipelineRun!
}

type ListRuntimeType implements RuntimeType & WrappingRuntimeType {
  key: String!
  name: String
  displayName: String!
  description: String
  isNullable: Boolean!
  isList: Boolean!
  isBuiltin: Boolean!
  isNothing: Boolean!
  inputSchemaType: ConfigType
  outputSchemaType: ConfigType
  innerTypes: [RuntimeType!]!
  ofType: RuntimeType!
}

type Logger {
  name: String!
  description: String
  configField: ConfigTypeField
}

enum LogLevel {
  CRITICAL
  ERROR
  INFO
  WARNING
  DEBUG
}

type LogMessageConnection {
  nodes: [PipelineRunEvent!]!
  pageInfo: PageInfo!
}

type LogMessageEvent implements MessageEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  step: ExecutionStep
}

type Materialization implements DisplayableEvent {
  label: String!
  description: String
  metadataEntries: [EventMetadataEntry!]!
}

interface MessageEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  step: ExecutionStep
}

type MetadataItemDefinition {
  key: String!
  value: String!
}

type MissingFieldConfigError implements PipelineConfigValidationError {
  message: String!
  path: [String!]!
  stack: EvaluationStack!
  reason: EvaluationErrorReason!
  field: ConfigTypeField!
}

type MissingFieldsConfigError implements PipelineConfigValidationError {
  message: String!
  path: [String!]!
  stack: EvaluationStack!
  reason: EvaluationErrorReason!
  fields: [ConfigTypeField!]!
}

type MissingRunIdErrorEvent {
  invalidRunId: String!
}

type Mode {
  name: String!
  description: String
  resources: [Resource!]!
  loggers: [Logger!]!
}

type ModeNotFoundError implements Error {
  message: String!
  mode: String!
}

type Mutation {
  startPipelineExecution(executionParams: ExecutionParams!): StartPipelineExecutionResult!
  startScheduledExecution(scheduleName: String!): StartScheduledExecutionResult!
  launchPipelineExecution(executionParams: ExecutionParams!): LaunchPipelineExecutionResult!
  executePlan(executionParams: ExecutionParams!): ExecutePlanResult!
  startSchedule(scheduleName: String!): RunningScheduleResult!
  stopRunningSchedule(scheduleName: String!): RunningScheduleResult!
  reloadDagit: Boolean!
  cancelPipelineExecution(runId: String!): CancelPipelineExecutionResult!
  deletePipelineRun(runId: String!): DeletePipelineRunResult!
}

type NullableConfigType implements ConfigType & WrappingConfigType {
  key: String!
  description: String
  recursiveConfigTypes: [ConfigType!]!
  typeParamKeys: [String!]!
  isSelector: Boolean!
  ofType: ConfigType!
}

type NullableRuntimeType implements RuntimeType & WrappingRuntimeType {
  key: String!
  name: String
  displayName: String!
  description: String
  isNullable: Boolean!
  isList: Boolean!
  isBuiltin: Boolean!
  isNothing: Boolean!
  inputSchemaType: ConfigType
  outputSchemaType: ConfigType
  innerTypes: [RuntimeType!]!
  ofType: RuntimeType!
}

type ObjectStoreOperationEvent implements MessageEvent & StepEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  step: ExecutionStep
  operationResult: ObjectStoreOperationResult!
}

type ObjectStoreOperationResult implements DisplayableEvent {
  label: String!
  description: String
  metadataEntries: [EventMetadataEntry!]!
  op: ObjectStoreOperationType!
}

enum ObjectStoreOperationType {
  SET_OBJECT
  GET_OBJECT
  RM_OBJECT
  CP_OBJECT
}

type Output {
  solid: Solid!
  definition: OutputDefinition!
  dependedBy: [Input!]!
}

type OutputDefinition {
  solidDefinition: SolidDefinition!
  name: String!
  description: String
  type: RuntimeType!
}

type OutputMapping {
  mappedOutput: Output!
  definition: OutputDefinition!
}

type PageInfo {
  lastCursor: Cursor
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  count: Int!
  totalCount: Int!
}

type Partition {
  name: String!
  partitionSetName: String!
  solidSubset: [String!]
  mode: String!
  environmentConfigYaml: String!
  tags: [PipelineTag!]!
}

type Partitions {
  results: [Partition!]!
}

type PartitionSet {
  name: String!
  pipelineName: String!
  solidSubset: [String!]
  mode: String!
  partitions(cursor: String, limit: Int): Partitions!
}

type PartitionSetNotFoundError implements Error {
  message: String!
  partitionSetName: String!
}

union PartitionSetOrError = PartitionSet | PartitionSetNotFoundError | PythonError

type PartitionSets {
  results: [PartitionSet!]!
}

union PartitionSetsOrError = PartitionSets | PipelineNotFoundError | PythonError

type Pipeline implements SolidContainer & PipelineReference {
  solids: [Solid!]!
  name: String!
  description: String
  runtimeTypes: [RuntimeType!]!
  runs: [PipelineRun!]!
  modes: [Mode!]!
  solidHandles(parentHandleID: String): [SolidHandle!]!
  presets: [PipelinePreset!]!
  solidHandle(handleID: String!): SolidHandle
  tags: [PipelineTag!]!
}

interface PipelineConfigValidationError {
  message: String!
  path: [String!]!
  stack: EvaluationStack!
  reason: EvaluationErrorReason!
}

type PipelineConfigValidationInvalid {
  pipeline: Pipeline!
  errors: [PipelineConfigValidationError!]!
}

union PipelineConfigValidationResult = InvalidSubsetError | PipelineConfigValidationValid | PipelineConfigValidationInvalid | PipelineNotFoundError | PythonError

type PipelineConfigValidationValid {
  pipeline: Pipeline!
}

type PipelineConnection {
  nodes: [Pipeline!]!
}

interface PipelineEvent {
  pipeline: Pipeline!
}

type PipelineFailureEvent implements MessageEvent & PipelineEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  step: ExecutionStep
  pipeline: Pipeline!
}

type PipelineInitFailureEvent implements MessageEvent & PipelineEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  step: ExecutionStep
  pipeline: Pipeline!
  error: PythonError!
}

type PipelineNotFoundError implements Error {
  message: String!
  pipelineName: String!
}

union PipelineOrError = Pipeline | PipelineNotFoundError | InvalidSubsetError | PythonError

type PipelinePreset {
  name: String!
  solidSubset: [String!]
  environmentConfigYaml: String!
  mode: String!
}

interface PipelineReference {
  name: String!
}

type PipelineRun {
  runId: String!
  status: PipelineRunStatus!
  pipeline: PipelineReference!
  stats: PipelineRunStatsOrError!
  logs: LogMessageConnection!
  computeLogs(stepKey: String!): ComputeLogs!
  executionPlan: ExecutionPlan
  stepKeysToExecute: [String!]
  environmentConfigYaml: String!
  mode: String!
  tags: [PipelineTag!]!
  canCancel: Boolean!
  executionSelection: ExecutionSelection!
}

union PipelineRunEvent = ExecutionStepFailureEvent | ExecutionStepInputEvent | ExecutionStepOutputEvent | ExecutionStepSkippedEvent | ExecutionStepStartEvent | ExecutionStepSuccessEvent | ExecutionStepUpForRetryEvent | ExecutionStepRestartEvent | LogMessageEvent | PipelineFailureEvent | PipelineInitFailureEvent | PipelineStartEvent | PipelineSuccessEvent | ObjectStoreOperationEvent | StepExpectationResultEvent | StepMaterializationEvent | EngineEvent

type PipelineRunLogsSubscriptionFailure {
  message: String!
  missingRunId: String
}

union PipelineRunLogsSubscriptionPayload = PipelineRunLogsSubscriptionSuccess | PipelineRunLogsSubscriptionFailure

type PipelineRunLogsSubscriptionSuccess {
  run: PipelineRun!
  messages: [PipelineRunEvent!]!
}

type PipelineRunNotFoundError implements Error {
  message: String!
  runId: String!
}

union PipelineRunOrError = PipelineRun | PipelineRunNotFoundError | PythonError

type PipelineRuns {
  results: [PipelineRun!]!
}

input PipelineRunsFilter {
  runId: String
  pipelineName: String
  tags: [ExecutionTag!]
  status: PipelineRunStatus
}

union PipelineRunsOrError = PipelineRuns | InvalidPipelineRunsFilterError | PythonError

union PipelineRunStatsOrError = PipelineRunStatsSnapshot | PythonError

type PipelineRunStatsSnapshot {
  runId: String!
  stepsSucceeded: Int!
  stepsFailed: Int!
  materializations: Int!
  expectations: Int!
  startTime: Float
  endTime: Float
}

enum PipelineRunStatus {
  NOT_STARTED
  MANAGED
  STARTED
  SUCCESS
  FAILURE
}

union PipelinesOrError = PipelineConnection | PythonError

type PipelineStartEvent implements MessageEvent & PipelineEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  step: ExecutionStep
  pipeline: Pipeline!
}

type PipelineSuccessEvent implements MessageEvent & PipelineEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  step: ExecutionStep
  pipeline: Pipeline!
}

type PipelineTag {
  key: String!
  value: String!
}

type PipelineTagAndValues {
  key: String!
  values: [String!]!
}

type PresetNotFoundError implements Error {
  message: String!
  preset: String!
}

type PythonError implements Error {
  message: String!
  className: String
  stack: [String!]!
  cause: PythonError
}

type Query {
  version: String!
  reloadSupported: Boolean!
  pipelineOrError(params: ExecutionSelector!): PipelineOrError!
  pipeline(params: ExecutionSelector!): Pipeline!
  pipelinesOrError: PipelinesOrError!
  pipelines: PipelineConnection!
  runtimeTypeOrError(pipelineName: String!, runtimeTypeName: String!): RuntimeTypeOrError!
  scheduler: SchedulerOrError!
  scheduleOrError(scheduleName: String!, limit: Int): ScheduleOrError!
  partitionSetsOrError(pipelineName: String): PartitionSetsOrError!
  partitionSetOrError(partitionSetName: String): PartitionSetOrError!
  pipelineRunsOrError(filter: PipelineRunsFilter, cursor: String, limit: Int): PipelineRunsOrError!
  pipelineRunOrError(runId: ID!): PipelineRunOrError!
  pipelineRunTags: [PipelineTagAndValues!]!
  usedSolids: [UsedSolid!]!
  usedSolid(name: String!): UsedSolid
  isPipelineConfigValid(pipeline: ExecutionSelector!, environmentConfigData: EnvironmentConfigData, mode: String!): PipelineConfigValidationResult!
  executionPlan(pipeline: ExecutionSelector!, environmentConfigData: EnvironmentConfigData, mode: String!): ExecutionPlanResult!
  environmentSchemaOrError(selector: ExecutionSelector!, mode: String): EnvironmentSchemaOrError!
  instance: Instance!
}

type RegularConfigType implements ConfigType {
  key: String!
  description: String
  recursiveConfigTypes: [ConfigType!]!
  typeParamKeys: [String!]!
  isSelector: Boolean!
  givenName: String!
}

type RegularRuntimeType implements RuntimeType {
  key: String!
  name: String
  displayName: String!
  description: String
  isNullable: Boolean!
  isList: Boolean!
  isBuiltin: Boolean!
  isNothing: Boolean!
  inputSchemaType: ConfigType
  outputSchemaType: ConfigType
  innerTypes: [RuntimeType!]!
}

type Resource {
  name: String!
  description: String
  configField: ConfigTypeField
}

type ResourceRequirement {
  resourceKey: String!
}

type RunLauncher {
  name: String!
}

type RunLauncherNotDefinedError implements Error {
  message: String!
}

type RunningSchedule {
  scheduleDefinition: ScheduleDefinition!
  pythonPath: String
  repositoryPath: String
  status: ScheduleStatus!
  runs(limit: Int): [PipelineRun!]!
  runsCount: Int!
  ticks(limit: Int): [ScheduleTick!]!
  ticksCount: Int!
  stats: ScheduleTickStatsSnapshot!
  attempts(limit: Int): [ScheduleAttempt!]!
  attemptsCount: Int!
  logsPath: String!
}

type RunningScheduleResult {
  schedule: RunningSchedule!
}

type RuntimeMismatchConfigError implements PipelineConfigValidationError {
  message: String!
  path: [String!]!
  stack: EvaluationStack!
  reason: EvaluationErrorReason!
  valueRep: String
}

interface RuntimeType {
  key: String!
  name: String
  displayName: String!
  description: String
  isNullable: Boolean!
  isList: Boolean!
  isBuiltin: Boolean!
  isNothing: Boolean!
  inputSchemaType: ConfigType
  outputSchemaType: ConfigType
  innerTypes: [RuntimeType!]!
}

type RuntimeTypeNotFoundError implements Error {
  message: String!
  pipeline: Pipeline!
  runtimeTypeName: String!
}

union RuntimeTypeOrError = RegularRuntimeType | PipelineNotFoundError | RuntimeTypeNotFoundError | PythonError

type ScalarUnionConfigType implements ConfigType {
  key: String!
  description: String
  recursiveConfigTypes: [ConfigType!]!
  typeParamKeys: [String!]!
  isSelector: Boolean!
  scalarType: ConfigType!
  nonScalarType: ConfigType!
  scalarTypeKey: String!
  nonScalarTypeKey: String!
}

type ScheduleAttempt {
  time: Float!
  jsonResult: String!
  status: ScheduleAttemptStatus!
  run: PipelineRun
}

enum ScheduleAttemptStatus {
  SUCCESS
  ERROR
  SKIPPED
}

type ScheduleDefinition {
  name: String!
  cronSchedule: String!
  pipelineName: String!
  solidSubset: [String]
  mode: String!
  environmentConfigYaml: String
  partitionSet: PartitionSet
}

type ScheduledExecutionBlocked {
  message: String!
}

type ScheduleNotFoundError implements Error {
  message: String!
  scheduleName: String!
}

union ScheduleOrError = RunningSchedule | ScheduleNotFoundError | PythonError

type Scheduler {
  runningSchedules: [RunningSchedule!]!
}

type SchedulerNotDefinedError implements Error {
  message: String!
}

union SchedulerOrError = Scheduler | SchedulerNotDefinedError | PythonError

enum ScheduleStatus {
  RUNNING
  STOPPED
  ENDED
}

type ScheduleTick {
  tickId: String!
  status: ScheduleTickStatus!
  timestamp: Float!
  tickSpecificData: ScheduleTickSpecificData
}

type ScheduleTickFailureData {
  error: PythonError!
}

union ScheduleTickSpecificData = ScheduleTickSuccessData | ScheduleTickFailureData

type ScheduleTickStatsSnapshot {
  ticksStarted: Int!
  ticksSucceeded: Int!
  ticksSkipped: Int!
  ticksFailed: Int!
}

enum ScheduleTickStatus {
  STARTED
  SKIPPED
  SUCCESS
  FAILURE
}

type ScheduleTickSuccessData {
  run: PipelineRun
}

type SelectorTypeConfigError implements PipelineConfigValidationError {
  message: String!
  path: [String!]!
  stack: EvaluationStack!
  reason: EvaluationErrorReason!
  incomingFields: [String!]!
}

type Solid {
  name: String!
  definition: ISolidDefinition!
  inputs: [Input!]!
  outputs: [Output!]!
}

interface SolidContainer {
  solids: [Solid!]!
}

type SolidDefinition implements ISolidDefinition {
  name: String!
  description: String
  metadata: [MetadataItemDefinition!]!
  inputDefinitions: [InputDefinition!]!
  outputDefinitions: [OutputDefinition!]!
  requiredResources: [ResourceRequirement!]!
  configField: ConfigTypeField
}

type SolidHandle {
  handleID: String!
  solid: Solid!
  parent: SolidHandle
}

type SolidInvocationSite {
  pipeline: Pipeline!
  solidHandle: SolidHandle!
}

type StartPipelineExecutionDisabledError implements Error {
  message: String!
}

union StartPipelineExecutionResult = StartPipelineExecutionSuccess | StartPipelineExecutionDisabledError | InvalidStepError | InvalidOutputError | PipelineConfigValidationInvalid | PipelineNotFoundError | PythonError

type StartPipelineExecutionSuccess {
  run: PipelineRun!
}

union StartScheduledExecutionResult = ScheduleNotFoundError | SchedulerNotDefinedError | ScheduledExecutionBlocked | StartPipelineExecutionSuccess | StartPipelineExecutionDisabledError | LaunchPipelineExecutionSuccess | RunLauncherNotDefinedError | InvalidStepError | InvalidOutputError | PipelineConfigValidationInvalid | PipelineNotFoundError | PythonError

interface StepEvent {
  step: ExecutionStep
}

type StepExpectationResultEvent implements MessageEvent & StepEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  step: ExecutionStep
  expectationResult: ExpectationResult!
}

enum StepKind {
  COMPUTE
}

type StepMaterializationEvent implements MessageEvent & StepEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  step: ExecutionStep
  materialization: Materialization!
}

type Subscription {
  pipelineRunLogs(runId: ID!, after: Cursor): PipelineRunLogsSubscriptionPayload!
  computeLogs(runId: ID!, stepKey: String!, ioType: ComputeIOType!, cursor: String): ComputeLogFile!
}

type TypeCheck implements DisplayableEvent {
  label: String!
  description: String
  metadataEntries: [EventMetadataEntry!]!
  success: Boolean!
}

type UnknownPipeline implements PipelineReference {
  name: String!
}

type UsedSolid {
  definition: ISolidDefinition!
  invocations: [SolidInvocationSite!]!
}

interface WrappingConfigType {
  ofType: ConfigType!
}

interface WrappingRuntimeType {
  ofType: RuntimeType!
}
